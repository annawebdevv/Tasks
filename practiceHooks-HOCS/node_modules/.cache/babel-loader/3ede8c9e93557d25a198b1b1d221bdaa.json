{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/Tasks/practiceHooks-HOCS/src/hooks/HookUseMemo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction complexCompute(num) {\n  let i = 0;\n\n  while (i < 1000000000) i++;\n\n  return count + 2;\n}\n\nexport const HookUseMemo = () => {\n  _s();\n\n  const [count, setCount] = useState(50); // const [content, setContent] = useState()\n\n  const computed = complexCompute(count);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Memo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" computed number \", computed]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(prev => prev + 2),\n      children: \" +2 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setCount(prev => prev - 2);\n      },\n      children: \" -2 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HookUseMemo, \"QEKqzDghTtKCcWRXbAlF/wKqB/M=\");\n\n_c = HookUseMemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookUseMemo\");","map":{"version":3,"names":["useState","useEffect","useMemo","complexCompute","num","i","count","HookUseMemo","setCount","computed","prev"],"sources":["/Users/user/Documents/Новая папка/Tasks/practiceHooks-HOCS/src/hooks/HookUseMemo.jsx"],"sourcesContent":["import {useState,useEffect, useMemo} from 'react'\n\nfunction complexCompute(num){\n    let i=0\n    while(i<1000000000) i++\n    return count+2\n}\n\n\nexport const HookUseMemo =()=> {\n    const [count, setCount] = useState(50)\n    // const [content, setContent] = useState()\n\n    const computed = complexCompute(count)\n\n\n    return ( \n        <div>\n            <h2>Memo</h2>\n            <p> computed number {computed}</p>\n            <button onClick={()=>setCount(prev =>(prev+2))} > +2 </button>\n            <button onClick={()=>{setCount(prev =>(prev-2))}} > -2 </button>\n\n        </div>\n     );\n}\n"],"mappings":";;;AAAA,SAAQA,QAAR,EAAiBC,SAAjB,EAA4BC,OAA5B,QAA0C,OAA1C;;;AAEA,SAASC,cAAT,CAAwBC,GAAxB,EAA4B;EACxB,IAAIC,CAAC,GAAC,CAAN;;EACA,OAAMA,CAAC,GAAC,UAAR,EAAoBA,CAAC;;EACrB,OAAOC,KAAK,GAAC,CAAb;AACH;;AAGD,OAAO,MAAMC,WAAW,GAAE,MAAK;EAAA;;EAC3B,MAAM,CAACD,KAAD,EAAQE,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAD2B,CAE3B;;EAEA,MAAMS,QAAQ,GAAGN,cAAc,CAACG,KAAD,CAA/B;EAGA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,gCAAqBG,QAArB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAQ,OAAO,EAAE,MAAID,QAAQ,CAACE,IAAI,IAAIA,IAAI,GAAC,CAAd,CAA7B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAQ,OAAO,EAAE,MAAI;QAACF,QAAQ,CAACE,IAAI,IAAIA,IAAI,GAAC,CAAd,CAAR;MAA0B,CAAhD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AASH,CAhBM;;GAAMH,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}